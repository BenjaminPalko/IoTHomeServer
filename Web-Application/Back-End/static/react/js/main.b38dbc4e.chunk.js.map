{"version":3,"sources":["components/Home/Home.js","components/About/About.js","components/Devices/AddDeviceInput/AddDeviceInput.js","components/Devices/Devices.js","components/CustomNavbar/CustomNavbar.js","App.js","serviceWorker.js","index.js","logo_body.svg"],"names":["Home","react_default","a","createElement","Container","Jumbotron","window","token","ListGroup","variant","Item","Button","className","type","Component","About","AddDeviceInput","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleHide","bind","assertThisInitialized","state","show","setState","_this2","bsStyle","bsSize","onClick","Modal","onHide","container","aria-labelledby","Header","closeButton","Title","id","Body","Footer","React","Devices","Devices_AddDeviceInput_AddDeviceInput","CustomNavbar","Navbar","bg","expand","Brand","href","src","logo","alt","Toggle","aria-controls","Collapse","Nav","Link","NavDropdown","title","target","Divider","Text","App","BrowserRouter","CustomNavbar_CustomNavbar_CustomNavbar","Route","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"js/main.b38dbc4e.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\n\r\nimport {Jumbotron, Container, ListGroup, Button} from 'react-bootstrap'\r\nimport './Home.css'\r\n\r\nexport default class Home extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Container>\r\n                    <Jumbotron>\r\n                        <h2>Welcome to IoT Web Controller</h2>\r\n                        <p>The Website is in Development.</p>\r\n                        <p>My Token connection: {window.token}</p>\r\n                    </Jumbotron>\r\n                    <div>\r\n                        <h2>Development Testing Area</h2>\r\n                        <ListGroup variant=\"flush\">\r\n                            <ListGroup.Item>\r\n                                <Button variant=\"primary\">B</Button>\r\n                                <Button variant=\"danger\">R</Button>\r\n                                <Button variant=\"warning\">Y</Button>\r\n                                <Button className=\"spacing\" variant=\"secondary\">Off</Button>\r\n                                LED Light Toggles\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item>\r\n                                <input className=\"spacing\" type=\"text\"></input>\r\n                                <Button className=\"spacing\" variant=\"primary\" type=\"submit\">\r\n                                    Submit\r\n                                </Button>\r\n                                Temperature\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item></ListGroup.Item>\r\n                            <ListGroup.Item></ListGroup.Item>\r\n                        </ListGroup>\r\n                    </div>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}   ","import React, {Component} from 'react'\r\nimport {Container} from 'react-bootstrap'\r\nimport './About.css'\r\n\r\nexport default class About extends Component {\r\n    render() {\r\n        return (\r\n            <Container className=\"contentPane\">\r\n                <div className=\"headerlayout\">\r\n                    <div className=\"spacer\">\r\n                        <h2 className=\"title\">About </h2>\r\n                        <p>The goal of this project is the research and development into current and future applications of IoT technology. \r\n                        Over the course of the Fall Semester we have researched current technologies and software used in IoT. We have \r\n                        considered various options and have mitigated our list then decided on the most appropriate task. </p>\r\n                        <p>Our project aims to create a home IoT network utilizing the raspberry pi as a central server, various devices can be added \r\n                        to this network and accessed/controlled through a companion web application with the potential of expanding to \r\n                        other application platforms. </p>\r\n                        <p>Our project aims to explore containerization for optimization, we have researched \r\n                        both Docker and Kubernetes as candidates. Various TCP options were investigated and support for existing devices \r\n                        will be a topic of research as progress is made. </p>\r\n                    </div>\r\n                </div>   \r\n            </Container>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Button, Modal, Render} from 'react-bootstrap';\r\nimport './AddDeviceInput.css'\r\n\r\n\r\nclass AddDeviceInput extends React.Component {\r\n    constructor(props, context) {\r\n      super(props, context);\r\n  \r\n      this.handleHide = this.handleHide.bind(this);\r\n  \r\n      this.state = {\r\n        show: false\r\n      };\r\n    }\r\n  \r\n    handleHide() {\r\n      this.setState({ show: false });\r\n    }\r\n    render() {\r\n      return (\r\n        <div className=\"modal-container\" >\r\n          <Button\r\n            bsStyle=\"primary\"\r\n            bsSize=\"medium\"\r\n            onClick={() => this.setState({ show: true })}\r\n          >\r\n            + Add Device\r\n          </Button>\r\n  \r\n          <Modal\r\n            show={this.state.show}\r\n            onHide={this.handleHide}\r\n            container={this}\r\n            aria-labelledby=\"contained-modal-title\"\r\n          >\r\n            <Modal.Header closeButton>\r\n              <Modal.Title id=\"contained-modal-title\">\r\n                Input The Device Settings\r\n              </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              ADD DEVICE CONTENT\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button onClick={this.handleHide}>Close</Button>\r\n            </Modal.Footer>\r\n          </Modal>\r\n        </div>\r\n      );\r\n    }\r\n}\r\n  \r\nexport default AddDeviceInput;","import React, {Component} from 'react'\r\nimport {Container, ListGroup} from 'react-bootstrap'\r\nimport AddDeviceInput from './AddDeviceInput/AddDeviceInput';\r\nimport './Devices.css'\r\n\r\nexport default class Devices extends Component {\r\n    render() {\r\n        return (\r\n            <Container className=\"contentPane\">\r\n                <div className=\"headerlayout\">\r\n                    <h2 className=\"title\">Devices </h2>\r\n                    <div className=\"spacer\"></div>\r\n                    <AddDeviceInput/>\r\n                \r\n                </div>\r\n                <Container className=\"contentList\">\r\n                    <ListGroup>\r\n                    <ListGroup.Item>LED 1</ListGroup.Item>\r\n                    <ListGroup.Item>LED 2</ListGroup.Item>\r\n                    <ListGroup.Item>Temperature 1</ListGroup.Item>\r\n                    <ListGroup.Item>Temperature 2</ListGroup.Item>\r\n                    <ListGroup.Item>Forecast</ListGroup.Item>\r\n                    </ListGroup>\r\n                </Container>\r\n            </Container>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Navbar, Nav, NavDropdown} from 'react-bootstrap';\r\nimport './CustomNavbar.css'\r\nimport logo from '../../logo_body.svg';\r\n\r\nexport default class CustomNavbar extends Component {\r\n  render() {\r\n    return (\r\n        <Navbar bg=\"light\" expand=\"lg\">\r\n            <Navbar.Brand href=\"/\">\r\n                <img className=\"logo_image\" src={logo} alt=\"logo\"/> {'IoT Web Controller'}\r\n            </Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Link href=\"/about\">About</Nav.Link>\r\n                    <Nav.Link href=\"/devices\">Devices</Nav.Link>\r\n                    <NavDropdown title=\"Account\" id=\"basic-nav-dropdown\">\r\n                        <NavDropdown.Item href=\"https://github.com/BenjaminPalko/IoTHomeServer\" target=\"_blank\">GitHub Source Code</NavDropdown.Item>\r\n                        <NavDropdown.Item href=\"/account/configuration\">Configuration</NavDropdown.Item>\r\n                        <NavDropdown.Item href=\"/account/change_password\">Change Password</NavDropdown.Item>\r\n                        <NavDropdown.Divider />\r\n                        <NavDropdown.Item href=\"/logging_out\">Log Out</NavDropdown.Item>\r\n                    </NavDropdown>\r\n                </Nav>\r\n                <Navbar.Text>\r\n                    Signed in as: <a href=\"#login\">Andrew Nguyen</a>\r\n                </Navbar.Text>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\r\nimport Home from './components/Home/Home';\r\nimport About from './components/About/About';\r\nimport Devices from './components/Devices/Devices';\r\nimport Navbar from './components/CustomNavbar/CustomNavbar';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div>\r\n          <Navbar/>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route path=\"/about\" component={About} />\r\n          <Route path=\"/devices\" component={Devices} />\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"media/logo_body.bf7b2f69.svg\";"],"sourceRoot":""}