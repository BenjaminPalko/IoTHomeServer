{"version":3,"sources":["logo_body.svg","components/Home/Home.js","components/CustomNavbar/CustomNavbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","react_default","a","createElement","Container","Jumbotron","className","Component","CustomNavbar","Navbar","bg","expand","Brand","href","src","logo","alt","Toggle","aria-controls","Collapse","id","Nav","NavDropdown","title","Item","target","Divider","Text","App","BrowserRouter","CustomNavbar_CustomNavbar_CustomNavbar","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6TCMnBC,0LAGb,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAWC,UAAU,eACjBL,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,yEACAF,EAAAC,EAAAC,cAAA,gFATUI,+DCDbC,mLAEjB,OACIP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACtBV,EAAAC,EAAAC,cAACM,EAAA,EAAOG,MAAR,CAAcC,KAAK,KACfZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aAAaQ,IAAKC,IAAMC,IAAI,SAD/C,IACyD,sBAEzDf,EAAAC,EAAAC,cAACM,EAAA,EAAOQ,OAAR,CAAeC,gBAAc,qBAC7BjB,EAAAC,EAAAC,cAACM,EAAA,EAAOU,SAAR,CAAiBC,GAAG,oBAChBnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAKf,UAAU,WACXL,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAaC,MAAM,UAAUH,GAAG,sBAC5BnB,EAAAC,EAAAC,cAACmB,EAAA,EAAYE,KAAb,CAAkBX,KAAK,iDAAiDY,OAAO,UAA/E,sBACAxB,EAAAC,EAAAC,cAACmB,EAAA,EAAYE,KAAb,CAAkBX,KAAK,4BAAvB,mBACAZ,EAAAC,EAAAC,cAACmB,EAAA,EAAYI,QAAb,MACAzB,EAAAC,EAAAC,cAACmB,EAAA,EAAYE,KAAb,CAAkBX,KAAK,gBAAvB,aAGRZ,EAAAC,EAAAC,cAACM,EAAA,EAAOkB,KAAR,sBACkB1B,EAAAC,EAAAC,cAAA,KAAGU,KAAK,UAAR,2BAlBQN,aCmB3BqB,mLAZT,OACE3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,KACE5B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC2B,EAAD,MACA7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWlC,aAP3BO,aCGE4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"js/main.25efd354.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"media/logo_body.34b37e99.svg\";","import React, {Component} from 'react'\r\nimport {Jumbotron, Container} from 'react-bootstrap'\r\nimport './Home.css'\r\n// import DeviceType_LED from '../Devices/DeviceType/DeviceType_LED';\r\n// import DeviceType_Temperature from '../Devices/DeviceType/DeviceType_Temperature';\r\n\r\nexport default class Home extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Container>\r\n                    <Jumbotron className=\"text-center\">\r\n                        <h1>IoT Web Controller</h1>\r\n                        <h5>Simple IoT platform that controls Arduino devices remotely.</h5>\r\n                        <h6>Press \"Find Out More!\" to learn more about each device. </h6>\r\n                    </Jumbotron>\r\n                    {/* <Container> */}\r\n                        {/* <Row>\r\n                            <h2>Development Testing Area</h2>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col>\r\n                                <Card >\r\n                                    \r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                        <br/>\r\n                        <Row>\r\n                            <Col>\r\n                                <Card >\r\n                                    <Card.Body>\r\n                                        <Card.Title>Card Title</Card.Title>\r\n                                        <Card.Text>\r\n                                        Some quick example text to build on the card title and make up the bulk of\r\n                                        the card's content.\r\n                                        </Card.Text>\r\n                                        <Button variant=\"primary\">Go somewhere</Button>\r\n                                    </Card.Body>\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                        <br/>\r\n                        <Row>\r\n                            <Col>\r\n                                <Card >\r\n                                    <Card.Body>\r\n                                        <Card.Title>Card Title</Card.Title>\r\n                                        <Card.Text>\r\n                                        Some quick example text to build on the card title and make up the bulk of\r\n                                        the card's content.\r\n                                        </Card.Text>\r\n                                        <Button variant=\"primary\">Go somewhere</Button>\r\n                                    </Card.Body>\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                        <br/> */}\r\n                    {/* </Container>\r\n                    <ListGroup variant=\"flush\">\r\n                        <ListGroup.Item> */}\r\n                                {/* <DeviceType_Temperature/> */}\r\n                        {/* </ListGroup.Item>\r\n                        <ListGroup.Item> */}\r\n                            {/*<DeviceType_LED/> */}\r\n                            {/* LED Light Toggles */}\r\n                        {/* </ListGroup.Item>\r\n                        <ListGroup.Item></ListGroup.Item>\r\n                    </ListGroup> */}\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}   ","import React, { Component } from 'react'\nimport { Navbar, Nav, NavDropdown} from 'react-bootstrap';\nimport './CustomNavbar.css'\nimport logo from '../../logo_body.svg';\n\nexport default class CustomNavbar extends Component {\n  render() {\n    return (\n        <Navbar bg=\"light\" expand=\"lg\">\n            <Navbar.Brand href=\"/\">\n                <img className=\"logo_image\" src={logo} alt=\"logo\"/> {'IoT Web Controller'}\n            </Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    <NavDropdown title=\"Account\" id=\"basic-nav-dropdown\">\n                        <NavDropdown.Item href=\"https://github.com/BenjaminPalko/IoTHomeServer\" target=\"_blank\">GitHub Source Code</NavDropdown.Item>\n                        <NavDropdown.Item href=\"/account/change_password\">Change Password</NavDropdown.Item>\n                        <NavDropdown.Divider />\n                        <NavDropdown.Item href=\"/logging_out\">Log Out</NavDropdown.Item>\n                    </NavDropdown>\n                </Nav>\n                <Navbar.Text>\n                    Signed in as: <a href=\"#login\">Andrew Nguyen</a>\n                </Navbar.Text>\n            </Navbar.Collapse>\n        </Navbar>\n    )\n  }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport Home from './components/Home/Home';\nimport Navbar from './components/CustomNavbar/CustomNavbar';\n// import Login from './components/Login/Login';\n// import About from './components/About/About';\n// import Devices from './components/Devices/Devices';\n\nclass App extends Component {\n\n  render() {\n      return (\n        <Router>\n          <div>\n            <Navbar/>\n            <Route exact path=\"/\" component={Home} />\n            {/* <Route path=\"/login/\" component={Login} />  */}\n          </div>\n        </Router>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}